{
  "Computer Science": {
    "1": {
      "Easy": [
        {
          "id": 1,
          "question": "What is React?",
          "options": ["Library", "Framework", "Language", "Tool"],
          "answer": "Library",
          "topic": "React",
          "explanation": "React is a JavaScript library for building user interfaces, developed by Facebook."
        },
        {
          "id": 2,
          "question": "What is JSX?",
          "options": ["JavaScript", "XML-like Syntax", "CSS", "None"],
          "answer": "XML-like Syntax",
          "topic": "JSX",
          "explanation": "JSX is a syntax extension for JavaScript that allows you to write HTML-like code in JavaScript. It's used in React to describe the UI."
        },
        {
          "id": 3,
          "question": "What is the primary use of CSS?",
          "options": ["Adding interactivity", "Styling the website", "Creating server-side logic", "Defining routes"],
          "answer": "Styling the website",
          "topic": "CSS",
          "explanation": "CSS (Cascading Style Sheets) is used to style HTML documents and provide layouts, colors, and fonts for web pages."
        },
        {
          "id": 4,
          "question": "What is a variable in JavaScript?",
          "options": ["A number", "A container for data", "A mathematical operation", "A function"],
          "answer": "A container for data",
          "topic": "JavaScript Basics",
          "explanation": "A variable in JavaScript is a container that holds a value, such as a number, string, or object, that can be used and changed during the execution of a program."
        },
        {
          "id": 5,
          "question": "Which tag is used to link an external CSS file?",
          "options": ["<style>", "<link>", "<css>", "<script>"],
          "answer": "<link>",
          "topic": "HTML",
          "explanation": "The <link> tag is used to link an external CSS file to an HTML document. It is typically placed in the <head> section of the HTML."
        }
      ],
      "Medium": [
        {
          "id": 6,
          "question": "What is a closure in JavaScript?",
          "options": ["A type of variable", "A function that retains access to its lexical scope", "A data structure", "A loop"],
          "answer": "A function that retains access to its lexical scope",
          "topic": "JavaScript Closures",
          "explanation": "A closure in JavaScript is a function that remembers its lexical scope, even when the function is executed outside that scope."
        },
        {
          "id": 7,
          "question": "What does the 'this' keyword refer to in JavaScript?",
          "options": ["The current function", "The global object", "The functionâ€™s parameters", "The object that owns the method"],
          "answer": "The object that owns the method",
          "topic": "JavaScript",
          "explanation": "'this' refers to the object that owns the currently executing method. It is used to access properties and methods of the object."
        },
        {
          "id": 8,
          "question": "What is the main difference between var and let in JavaScript?",
          "options": ["let is function-scoped, var is block-scoped", "var is function-scoped, let is block-scoped", "There is no difference", "let is used for loops only"],
          "answer": "var is function-scoped, let is block-scoped",
          "topic": "JavaScript Variables",
          "explanation": "The main difference is that 'var' is function-scoped, whereas 'let' is block-scoped, meaning 'let' can be limited to a block, while 'var' is available throughout the function."
        },
        {
          "id": 9,
          "question": "Which of the following is NOT a valid data type in JavaScript?",
          "options": ["String", "Number", "Object", "Integer"],
          "answer": "Integer",
          "topic": "JavaScript Data Types",
          "explanation": "In JavaScript, 'Integer' is not a valid data type. The valid types are String, Number, Object, and others like Boolean and Undefined."
        },
        {
          "id": 10,
          "question": "Which HTML element is used for JavaScript code?",
          "options": ["<js>", "<script>", "<java>", "<link>"],
          "answer": "<script>",
          "topic": "HTML and JavaScript",
          "explanation": "The <script> tag is used to include JavaScript code within an HTML document or link to an external JavaScript file."
        }
      ],
      "Hard": [
        {
          "id": 11,
          "question": "What is the purpose of 'use strict' in JavaScript?",
          "options": ["To enable strict mode for better error handling", "To define constants", "To use variables", "To make functions asynchronous"],
          "answer": "To enable strict mode for better error handling",
          "topic": "JavaScript Strict Mode",
          "explanation": "'use strict' is a directive in JavaScript that helps you write secure JavaScript by catching common coding mistakes and preventing the use of unsafe functions."
        },
        {
          "id": 12,
          "question": "What is an IIFE (Immediately Invoked Function Expression)?",
          "options": ["A function that is called after execution", "A function that is invoked when defined", "A function that returns another function", "A function with no parameters"],
          "answer": "A function that is invoked when defined",
          "topic": "JavaScript Functions",
          "explanation": "An IIFE is a function expression that runs as soon as it is defined. It is typically used to create a private scope for variables."
        },
        {
          "id": 13,
          "question": "What is the purpose of the 'bind()' method in JavaScript?",
          "options": ["It binds variables to an object", "It binds a function to an event", "It binds a function to a specific value of 'this'", "It binds an object to a class"],
          "answer": "It binds a function to a specific value of 'this'",
          "topic": "JavaScript Functions",
          "explanation": "The 'bind()' method creates a new function that, when called, has its 'this' keyword set to the provided value."
        },
        {
          "id": 14,
          "question": "What is the difference between null and undefined in JavaScript?",
          "options": ["null is a type, undefined is a value", "undefined is a type, null is a value", "Both are the same", "Both are primitive data types"],
          "answer": "undefined is a type, null is a value",
          "topic": "JavaScript Data Types",
          "explanation": "In JavaScript, 'undefined' is a type, and 'null' is a value. 'undefined' means a variable has been declared but not assigned a value, while 'null' is an intentional absence of a value."
        },
        {
          "id": 15,
          "question": "What is event delegation in JavaScript?",
          "options": ["Assigning events to individual elements", "Using one event handler to manage multiple elements", "Using event handlers for asynchronous functions", "Delegating tasks to other functions"],
          "answer": "Using one event handler to manage multiple elements",
          "topic": "JavaScript Events",
          "explanation": "Event delegation is the practice of using a single event listener to manage events for multiple elements, reducing memory usage and improving performance."
        }
      ]
    },
    "2": {
      "Easy": [
        {
          "id": 16,
          "question": "What is a function in JavaScript?",
          "options": ["A variable", "A block of code", "A loop", "A data structure"],
          "answer": "A block of code",
          "topic": "JavaScript Functions",
          "explanation": "A function is a block of reusable code that performs a specific task in JavaScript."
        },
        {
          "id": 17,
          "question": "What does the 'alert()' method do in JavaScript?",
          "options": ["Shows a message to the user", "Defines a variable", "Returns a value", "Creates a loop"],
          "answer": "Shows a message to the user",
          "topic": "JavaScript Methods",
          "explanation": "The 'alert()' method is used to display an alert box with a specified message to the user in JavaScript."
        },
        {
          "id": 18,
          "question": "What does 'console.log()' do in JavaScript?",
          "options": ["Logs data to the console", "Defines a constant", "Runs a function", "Creates a new variable"],
          "answer": "Logs data to the console",
          "topic": "JavaScript Console",
          "explanation": "'console.log()' is used to print data to the browser's console, typically used for debugging purposes."
        },
        {
          "id": 19,
          "question": "Which JavaScript method can be used to find the length of an array?",
          "options": ["length()", "size()", "count()", "arrayLength()"],
          "answer": "length()",
          "topic": "JavaScript Arrays",
          "explanation": "The 'length' property of an array is used to get the number of elements in that array."
        },
        {
          "id": 20,
          "question": "Which method can be used to sort an array in JavaScript?",
          "options": ["sort()", "order()", "arrange()", "align()"],
          "answer": "sort()",
          "topic": "JavaScript Arrays",
          "explanation": "The 'sort()' method in JavaScript is used to sort the elements of an array in ascending or descending order."
        }
      ],
      "Medium": [
        {
          "id": 21,
          "question": "What is the difference between == and === in JavaScript?",
          "options": ["== checks for value equality, === checks for both value and type equality", "== checks for both value and type equality, === checks only value", "There is no difference", "=== checks for value, == checks for type"],
          "answer": "== checks for value equality, === checks for both value and type equality",
          "topic": "JavaScript Operators",
          "explanation": "'==' compares only the values, while '===' compares both the values and the types."
        },
        {
          "id": 22,
          "question": "What is a callback function in JavaScript?",
          "options": ["A function that returns another function", "A function that is passed as an argument to another function", "A function that calls itself", "A function with no parameters"],
          "answer": "A function that is passed as an argument to another function",
          "topic": "JavaScript Functions",
          "explanation": "A callback function is passed as an argument to another function and is executed after the completion of that function."
        },
        {
          "id": 23,
          "question": "Which method is used to add an element to the end of an array in JavaScript?",
          "options": ["push()", "pop()", "shift()", "unshift()"],
          "answer": "push()",
          "topic": "JavaScript Arrays",
          "explanation": "The 'push()' method is used to add one or more elements to the end of an array."
        },
        {
          "id": 24,
          "question": "What is the purpose of 'setTimeout()' in JavaScript?",
          "options": ["Sets a timeout for a function", "Sets an event listener", "Sets the execution order", "Sets the display time"],
          "answer": "Sets a timeout for a function",
          "topic": "JavaScript Functions",
          "explanation": "The 'setTimeout()' method is used to execute a function after a specified delay (in milliseconds)."
        },
        {
          "id": 25,
          "question": "What does the 'map()' method do in JavaScript?",
          "options": ["Loops through each element in an array", "Filters elements in an array", "Creates a new array based on the original array", "Finds the maximum element in an array"],
          "answer": "Creates a new array based on the original array",
          "topic": "JavaScript Arrays",
          "explanation": "'map()' is used to create a new array with the results of applying a function to each element of the original array."
        }
      ],
      "Hard": [
        {
          "id": 26,
          "question": "What is a promise in JavaScript?",
          "options": ["A function", "A value that may be available now, or in the future", "A data structure", "A synchronous operation"],
          "answer": "A value that may be available now, or in the future",
          "topic": "JavaScript Promises",
          "explanation": "A promise is an object that represents a value that may not yet be available. It is used to handle asynchronous operations."
        },
        {
          "id": 27,
          "question": "What is the difference between call() and apply() in JavaScript?",
          "options": ["Both are used to bind 'this', but apply() takes an array of arguments", "call() takes an array of arguments, while apply() takes individual arguments", "Both are identical", "call() is used for asynchronous functions"],
          "answer": "Both are used to bind 'this', but apply() takes an array of arguments",
          "topic": "JavaScript Functions",
          "explanation": "Both 'call()' and 'apply()' are used to set the value of 'this' in a function, but 'apply()' takes an array of arguments, while 'call()' takes a comma-separated list."
        },
        {
          "id": 28,
          "question": "What is hoisting in JavaScript?",
          "options": ["Moving functions to the end of the script", "Moving variable declarations to the top of their scope", "A way of defining functions", "A way of defining variables"],
          "answer": "Moving variable declarations to the top of their scope",
          "topic": "JavaScript Hoisting",
          "explanation": "Hoisting is JavaScript's behavior of moving variable and function declarations to the top of their scope during the compile phase."
        },
        {
          "id": 29,
          "question": "What is the purpose of the 'async' and 'await' keywords in JavaScript?",
          "options": ["To make functions synchronous", "To handle promises in a cleaner way", "To define a function", "To create variables in async functions"],
          "answer": "To handle promises in a cleaner way",
          "topic": "JavaScript Promises",
          "explanation": "'async' and 'await' are used to handle asynchronous code more easily. 'async' makes a function return a promise, and 'await' pauses execution until the promise is resolved."
        },
        {
          "id": 30,
          "question": "What does 'Object.freeze()' do in JavaScript?",
          "options": ["Makes an object immutable", "Deletes an object", "Adds properties to an object", "Converts an object to a string"],
          "answer": "Makes an object immutable",
          "topic": "JavaScript Objects",
          "explanation": "'Object.freeze()' makes an object immutable by preventing new properties from being added, and existing properties from being modified or deleted."
        }
      ]
    }
  }
}
